sp ~ beta(88.6,9.6);
bsex ~ normal(0, 1);
bage ~ normal(0, sd_age);
bregion ~ normal(0, sd_region);
sd_age ~ normal(0, 1);
sd_region ~ normal(0, 1);
// Likelihood
for(a in 1:5){
for(s in 1:2){
for(r in 1:5){
y[a, s, r] ~ binomial(n[a, s, r], p_obs[a, s, r]);
}
}
}
x ~ binomial(N_se, se);
z ~ binomial(N_sp, sp);
}
generated quantities {
real p_national = 0;
vector[5] p_age = rep_vector(0, 5);
vector[2] p_sex = rep_vector(0, 2);
vector[5] p_region = rep_vector(0, 5);
// National prevalence
for(a in 1:5){
for(s in 1:2){
for(r in 1:5){
p_national += p[a, s, r] * pw[a, s, r];
}
}
}
// Regional prevalence
for(r in 1:5){
for(a in 1:5){
for(s in 1:2){
p_region[r] += p[a, s, r] * pw[a, s, r] / tot_pw_region[r];
}
}
}
// Age-specific prevalence
for(a in 1:5){
for(s in 1:2){
for(r in 1:5){
p_age[a] += p[a, s, r] * pw[a, s, r] / tot_pw_age[a];
}
}
}
// Sex-specific prevalence
for(s in 1:2){
for(a in 1:5){
for(r in 1:5){
p_sex[s] += p[a, s, r] * pw[a, s, r] / tot_pw_sex[s];
}
}
}
}
"
mrp_model <- stan_model(model_code = mrp_adjusted_region)
fit <- sampling(
object = mrp_model,
data = list(
y = y,
n = n,
pw = pw,
tot_pw_age = tot_pw_age,
tot_pw_sex = tot_pw_sex,
tot_pw_region = tot_pw_region,
x = x,
z = z,
N_se = N_se,
N_sp = N_sp
),
chains = 3,
warmup = 1000,
iter = 10000,
cores = 3,
seed = 111,
pars = c("bage","bsex","bregion","sd_age","sd_region","p_age","p_sex","p_region","p_national","se","sp"),
refresh = 0
)
y <- array(df_counts$y, dim = c(5, 2, 5))
n <- array(df_counts$n, dim = c(5, 2, 5))
pw <- array(df_pw$pw, dim = c(5, 2, 5))
tot_pw_age <- apply(pw, 1, sum)
tot_pw_sex <- apply(pw, 2, sum)
tot_pw_region <- apply(pw, 3, sum)
x <- 74
N_se <- 67
z <- 82
N_sp <- 90
setwd("~/Desktop/PhD files/Global Health")
#fit the model age-dependent force of infection using rsero package
#estimating site specific force of infection using rsero
asembodata<- Asembodata %>%
select(ageyrs,sex,age_cat,CHKpos, DENpos, RVFpos)
#recode the IgM_CHIK variable, Positive to TRUE , Negative to FALSE
asembodata$RVFpos <- ifelse(asembodata$RVFpos == 1, TRUE, FALSE)
asembodata$DENpos <- ifelse(asembodata$DENpos == 1, TRUE, FALSE)
asembodata$CHKpos <- ifelse(asembodata$CHKpos == 1, TRUE, FALSE)
asembodata$ageyrs=  as.integer(asembodata$ageyrs)
asembodata <- asembodata %>%
mutate(ageyrs = ifelse(ageyrs == 0, 1, ageyrs))
library(tidyverse)
#fit the model age-dependent force of infection using rsero package
#estimating site specific force of infection using rsero
asembodata<- Asembodata %>%
select(ageyrs,sex,age_cat,CHKpos, DENpos, RVFpos)
#recode the IgM_CHIK variable, Positive to TRUE , Negative to FALSE
asembodata$RVFpos <- ifelse(asembodata$RVFpos == 1, TRUE, FALSE)
asembodata$DENpos <- ifelse(asembodata$DENpos == 1, TRUE, FALSE)
asembodata$CHKpos <- ifelse(asembodata$CHKpos == 1, TRUE, FALSE)
asembodata$ageyrs=  as.integer(asembodata$ageyrs)
asembodata <- asembodata %>%
mutate(ageyrs = ifelse(ageyrs == 0, 1, ageyrs))
asembodata$sex<-as.character(asembodata$sex)
asembo_chik <-SeroData(age_at_sampling = asembodata$ageyrs,
Y= asembodata$CHKpos,
sampling_year = 2022)
library(Rsero)
asembo_chik <-SeroData(age_at_sampling = asembodata$ageyrs,
Y= asembodata$CHKpos,
sampling_year = 2022)
seroprevalence(asembo_chik)
seroprevalence.plot(asembo_chik, age_class = 5)
#fit the model constant model
piecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(5,50), priorT2 = c(15,70), se = 0.93, sp=0.902)
#fit the model constant model
piecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(5,50), priorT2 = c(15,70), se = 0.93, sp=0.902)
piecewise = fit(data = asembo_chik,  model = piecewisemodel, chains=1, iter=5000)
seroprevalence.fit(piecewise, YLIM = 1, age_class = 5)
ggsave("plot.chik.asembo.png")
#Plotting the posterior distributions
plot_posterior(piecewise)
plot(piecewise)
plot(piecewise, YLIM = 0.5)
plot(piecewise, YLIM = 2)
plot(piecewise, YLIM = 1)
ggsave("plot.chik.asembo.foi.png")
#Posterior distribution of relevant model parameters
parameters_credible_intervals(piecewise)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(piecewise)
#manyatta
#fit the model age-dependent force of infection using rsero package
#estimating site specific force of infection using rsero
manyattadata<- manyattadata_clean %>%
select(ageyrs,sex,age_cat,CHKpos, DENpos, RVFpos)
#recode the IgM_CHIK variable, Positive to TRUE , Negative to FALSE
manyattadata$RVFpos <- ifelse(manyattadata$RVFpos == 1, TRUE, FALSE)
manyattadata$DENpos <- ifelse(manyattadata$DENpos == 1, TRUE, FALSE)
manyattadata$CHKpos <- ifelse(manyattadata$CHKpos == 1, TRUE, FALSE)
manyattadata$ageyrs=  as.integer(manyattadata$ageyrs)
manyattadata <- manyattadata %>%
mutate(ageyrs = ifelse(ageyrs == 0, 1, ageyrs))
manyattadata$sex<-as.character(manyattadata$sex)
manyatta_chik <-SeroData(age_at_sampling = manyattadata$ageyrs,
Y= manyattadata$CHKpos,
sampling_year = 2022)
seroprevalence(manyatta_chik)
seroprevalence.plot(manyatta_chik, age_class = 5)
#fit the model constant model
manyattapiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.2, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(25,50), priorT2 = c(35,70))
manyattapiecewisemodel = fit(data = manyatta_chik,  model = manyattapiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(manyattapiecewisemodel, YLIM=1, age_class = 5)
ggsave("manyatta.chik.plot.png")
#Plotting the posterior distributions
plot_posterior(manyattapiecewisemodel)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(manyattapiecewisemodel)
plot(manyattapiecewisemodel)
plot(manyattapiecewisemodel, YLIM = 2)
plot(manyattapiecewisemodel, YLIM = 10)
plot(manyattapiecewisemodel, YLIM = 5)
print(manyattapiecewisemodel)
ggsave("manyatta.foi.png")
#kilifi
#fit the model age-dependent force of infection using rsero package
#estimating site specific force of infection using rsero
kilifidata<- Kilifidata_clean %>%
select(ageyrs,sex,age_cat,CHKpos, DENpos, RVFpos)
#recode the IgM_CHIK variable, Positive to TRUE , Negative to FALSE
kilifidata$RVFpos <- ifelse(kilifidata$RVFpos == 1, TRUE, FALSE)
kilifidata$DENpos <- ifelse(kilifidata$DENpos == 1, TRUE, FALSE)
kilifidata$CHKpos <- ifelse(kilifidata$CHKpos == 1, TRUE, FALSE)
kilifidata$ageyrs=  as.integer(kilifidata$ageyrs)
kilifidata <- kilifidata %>%
mutate(ageyrs = ifelse(ageyrs == 0, 1, ageyrs))
kilifidata$sex<-as.character(kilifidata$sex)
kilifidata_chik <-SeroData(age_at_sampling = kilifidata$ageyrs,
Y= kilifidata$CHKpos,
#category = kilifidata$sex,
#reference.category = "M",
sampling_year = 2022)
kilifidata_chik <-SeroData(age_at_sampling = kilifidata$ageyrs,
Y= kilifidata$CHKpos,
sampling_year = 2022)
seroprevalence(kilifidata_chik)
seroprevalence.plot(kilifidata_chik, age_class = 5)
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.2, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(25,50), priorT2 = c(35,70))
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.2, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(25,50), priorT2 = c(35,70))
kilifipiecewisemodel = fit(data = kilifidata_chik,  model = kilifipiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(kilifipiecewisemodel,age_class = 5)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(kilifipiecewisemodel)
plot(kilifipiecewisemodel)
plot(kilifipiecewisemodel, YLIM = 2)
plot(kilifipiecewisemodel, YLIM = 5)
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(25,50), priorT2 = c(35,70))
kilifipiecewisemodel = fit(data = kilifidata_chik,  model = kilifipiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(kilifipiecewisemodel,age_class = 5)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(kilifipiecewisemodel)
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = 30, priorT2 = 70 )
kilifipiecewisemodel = fit(data = kilifidata_chik,  model = kilifipiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(kilifipiecewisemodel,age_class = 5)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(kilifipiecewisemodel)
plot(kilifipiecewisemodel, YLIM = 5)
print(kilifipiecewisemodel)
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.5, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, priorT1 = c(15,50), priorT2 = c(50,80))
kilifipiecewisemodel = fit(data = kilifidata_chik,  model = kilifipiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(kilifipiecewisemodel,age_class = 5)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(kilifipiecewisemodel)
#fit the model constant model
kilifipiecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.5, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2)
kilifipiecewisemodel = fit(data = kilifidata_chik,  model = kilifipiecewisemodel, chains=1, iter=5000)
seroprevalence.fit(kilifipiecewisemodel,age_class = 5)
#Posterior distribution of relevant model parameters
parameters_credible_intervals(kilifipiecewisemodel)
plot(kilifipiecewisemodel, YLIM = 5)
189*150
plot <- function(FOIfit,
mean_only = FALSE,
individual_samples = 0,
YLIM = 1,
XLIM1 = NULL,
XLIM2 = NULL,
...) {
chains <- rstan::extract(FOIfit$fit)
L1 <- chains$lambda
plots <- list()
index.plot <- 0
for (cat in FOIfit$data$unique.categories) {
index.plot <- index.plot + 1
w <- which(FOIfit$data$category == cat, arr.ind = TRUE)[, 1]
d <- FOIfit$data$categoryindex[w]
p1 <- proportions.index(d)
M <- dim(chains$P)[1]
L <- matrix(0, nrow = M, ncol = FOIfit$data$A)
# Weighted FOI for each subcategory
for (i in seq_along(p1$index)) {
L <- L + p1$prop[i] * chains$Flambda[, p1$index[i]] * L1
}
# Compute posterior mean and 95% credible interval per year
par_out <- apply(L, 2, function(x)
c(mean = mean(x), quantile(x, probs = c(0.025, 0.975))))
latest_sampling_year <- max(FOIfit$data$sampling_year)
# Ascending order: earliest → latest
yrs <- seq(latest_sampling_year - FOIfit$data$A + 1, latest_sampling_year)
par_out <- par_out[, seq_len(length(yrs))]
par_out[which(par_out > YLIM)] <- YLIM
meanData <- data.frame(x = yrs, y = par_out["mean", ])
# Initialize ggplot
p <- ggplot2::ggplot()
# Add 95% credible interval shading
if (!mean_only) {
xpoly <- c(yrs, rev(yrs))
ypoly <- c(par_out["2.5%", ], rev(par_out["97.5%", ]))
DataEnvelope <- data.frame(x = xpoly, y = ypoly)
p <- p + ggplot2::geom_polygon(
data = DataEnvelope,
ggplot2::aes(x, y),
fill = "#d7def3",
alpha = 0.9
)
}
# Add individual posterior samples
if (individual_samples > 0) {
Index_samples <- sample(nrow(L), individual_samples)
for (i in Index_samples) {
ind_foi <- data.frame(x = yrs, y = L[i, ])
p <- p + ggplot2::geom_line(
data = ind_foi,
ggplot2::aes(x = x, y = y),
size = 0.8,
colour = "#bbbbbb",
alpha = 0.6
)
}
}
# Final plot assembly
if (is.null(XLIM1)) XLIM1 <- min(yrs)
if (is.null(XLIM2)) XLIM2 <- max(yrs)
p <- p +
ggplot2::geom_line(
data = meanData,
ggplot2::aes(x = x, y = y),
size = 1.1,
color = "#5e6b91"
) +
ggplot2::theme_classic() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(size = 22),
axis.text.y = ggplot2::element_text(size = 22),
text = ggplot2::element_text(size = 16)
) +
ggplot2::xlab("Year") +
ggplot2::ylab("Force of infection (per year)") +
ggplot2::ylim(0, YLIM) +
ggplot2::xlim(XLIM1, XLIM2)
plots[[index.plot]] <- p
plots[[index.plot]]$category <- cat
}
return(plots)
}
plot(kilifipiecewisemodel)
plot(manyattapiecewisemodel)
plot(manyattapiecewisemodel, YLIM = 5)
plot(piecewise, YLIM = 5)
seroprevalence.fit(piecewise, YLIM = 1, age_class = 5)
#Plotting the posterior distributions
plot_posterior(piecewise)
plot <- function(FOIfit,
mean_only = FALSE,
individual_samples = 0,
YLIM = 1,
XLIM1 = NULL,
XLIM2 = NULL,
...) {
chains <- rstan::extract(FOIfit$fit)
L1 <- chains$lambda
plots <- list()
index.plot <- 0
for (cat in FOIfit$data$unique.categories) {
index.plot <- index.plot + 1
w <- which(FOIfit$data$category == cat, arr.ind = TRUE)[, 1]
d <- FOIfit$data$categoryindex[w]
p1 <- proportions.index(d)
M <- dim(chains$P)[1]
L <- matrix(0, nrow = M, ncol = FOIfit$data$A)
# Weighted FOI for each subcategory
for (i in seq_along(p1$index)) {
L <- L + p1$prop[i] * chains$Flambda[, p1$index[i]] * L1
}
# Compute posterior mean and 95% credible interval per year
par_out <- apply(L, 2, function(x)
c(mean = mean(x), quantile(x, probs = c(0.025, 0.975))))
latest_sampling_year <- max(FOIfit$data$sampling_year)
# Ascending order: earliest → latest
yrs <- seq(latest_sampling_year - FOIfit$data$A + 1, latest_sampling_year)
par_out <- par_out[, seq_len(length(yrs))]
par_out[which(par_out > YLIM)] <- YLIM
meanData <- data.frame(x = yrs, y = par_out["mean", ])
# Initialize ggplot
p <- ggplot2::ggplot()
# Add 95% credible interval shading
if (!mean_only) {
xpoly <- c(yrs, rev(yrs))
ypoly <- c(par_out["2.5%", ], rev(par_out["97.5%", ]))
DataEnvelope <- data.frame(x = xpoly, y = ypoly)
p <- p + ggplot2::geom_polygon(
data = DataEnvelope,
ggplot2::aes(x, y),
fill = "#d7def3",
alpha = 0.9
)
}
# Add individual posterior samples
if (individual_samples > 0) {
Index_samples <- sample(nrow(L), individual_samples)
for (i in Index_samples) {
ind_foi <- data.frame(x = yrs, y = L[i, ])
p <- p + ggplot2::geom_line(
data = ind_foi,
ggplot2::aes(x = x, y = y),
size = 0.8,
colour = "#bbbbbb",
alpha = 0.6
)
}
}
# Final plot assembly
if (is.null(XLIM1)) XLIM1 <- min(yrs)
if (is.null(XLIM2)) XLIM2 <- max(yrs)
p <- p +
ggplot2::geom_line(
data = meanData,
ggplot2::aes(x = x, y = y),
size = 1.1,
color = "#5e6b91"
) +
ggplot2::theme_classic() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(size = 22),
axis.text.y = ggplot2::element_text(size = 22),
text = ggplot2::element_text(size = 16)
) +
ggplot2::xlab("Year") +
ggplot2::ylab("Force of infection") +
ggplot2::ylim(0, YLIM) +
ggplot2::xlim(XLIM1, XLIM2)
plots[[index.plot]] <- p
plots[[index.plot]]$category <- cat
}
return(plots)
}
#Posterior distribution of relevant model parameters
parameters_credible_intervals(piecewise)
plot(piecewisemodel)
plot(piecewisemodel)
plot(piecewise)
#fit the model constant model
piecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, se = 0.93, sp=0.902)
#fit the model constant model
piecewisemodel = FOImodel(type = 'piecewise', priorC1 = 0.6, priorC2 = 1, seroreversion = 1, priorRho1 = 0.06, priorRho2 = 0, K=2, se = 0.93, sp=0.902)
asembopiecewise = fit(data = asembo_chik,  model = piecewisemodel, chains=1, iter=5000)
seroprevalence.fit(asembopiecewise, YLIM = 1, age_class = 5)
#Plotting the posterior distributions
plot_posterior(piecewise)
plot <- function(FOIfit,
mean_only = FALSE,
individual_samples = 0,
YLIM = 1,
XLIM1 = NULL,
XLIM2 = NULL,
...) {
chains <- rstan::extract(FOIfit$fit)
L1 <- chains$lambda
plots <- list()
index.plot <- 0
for (cat in FOIfit$data$unique.categories) {
index.plot <- index.plot + 1
w <- which(FOIfit$data$category == cat, arr.ind = TRUE)[, 1]
d <- FOIfit$data$categoryindex[w]
p1 <- proportions.index(d)
M <- dim(chains$P)[1]
L <- matrix(0, nrow = M, ncol = FOIfit$data$A)
# Weighted FOI for each subcategory
for (i in seq_along(p1$index)) {
L <- L + p1$prop[i] * chains$Flambda[, p1$index[i]] * L1
}
# Compute posterior mean and 95% credible interval per year
par_out <- apply(L, 2, function(x)
c(mean = mean(x), quantile(x, probs = c(0.025, 0.975))))
latest_sampling_year <- max(FOIfit$data$sampling_year)
# Ascending order: earliest → latest
yrs <- seq(latest_sampling_year - FOIfit$data$A + 1, latest_sampling_year)
par_out <- par_out[, seq_len(length(yrs))]
par_out[which(par_out > YLIM)] <- YLIM
meanData <- data.frame(x = yrs, y = par_out["mean", ])
# Initialize ggplot
p <- ggplot2::ggplot()
# Add 95% credible interval shading
if (!mean_only) {
xpoly <- c(yrs, rev(yrs))
ypoly <- c(par_out["2.5%", ], rev(par_out["97.5%", ]))
DataEnvelope <- data.frame(x = xpoly, y = ypoly)
p <- p + ggplot2::geom_polygon(
data = DataEnvelope,
ggplot2::aes(x, y),
fill = "#d7def3",
alpha = 0.9
)
}
# Add individual posterior samples
if (individual_samples > 0) {
Index_samples <- sample(nrow(L), individual_samples)
for (i in Index_samples) {
ind_foi <- data.frame(x = yrs, y = L[i, ])
p <- p + ggplot2::geom_line(
data = ind_foi,
ggplot2::aes(x = x, y = y),
size = 0.8,
colour = "#bbbbbb",
alpha = 0.6
)
}
}
# Final plot assembly
if (is.null(XLIM1)) XLIM1 <- min(yrs)
if (is.null(XLIM2)) XLIM2 <- max(yrs)
p <- p +
ggplot2::geom_line(
data = meanData,
ggplot2::aes(x = x, y = y),
size = 1.1,
color = "#5e6b91"
) +
ggplot2::theme_classic() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(size = 22),
axis.text.y = ggplot2::element_text(size = 22),
text = ggplot2::element_text(size = 16)
) +
ggplot2::xlab("Year") +
ggplot2::ylab("Force of infection") +
ggplot2::ylim(0, YLIM) +
ggplot2::xlim(XLIM1, XLIM2)
plots[[index.plot]] <- p
plots[[index.plot]]$category <- cat
}
return(plots)
}
#Posterior distribution of relevant model parameters
parameters_credible_intervals(piecewise)
plot(asembopiecewise)
plot(asembopiecewise)
